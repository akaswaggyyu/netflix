{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0,\n  status: \"idle\"\n};\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = userSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`\n\nexport const selectCount = state => state.user.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","status","userSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","user","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"sources":["/Users/simon/Desktop/netflix-clone/src/features/userSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n  status: \"idle\",\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`\nexport const selectCount = (state) => state.user.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,MAAM,EAAE;AAFW,CAArB;AAKA,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EACnCK,IAAI,EAAE,MAD6B;EAEnCJ,YAFmC;EAGnC;EACAK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAPO;IAQRO,SAAS,EAAGD,KAAD,IAAW;MACpBA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAVO;IAWR;IACAQ,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;MACpCH,KAAK,CAACN,KAAN,IAAeS,MAAM,CAACC,OAAtB;IACD;EAdO;AAJyB,CAAD,CAA7B;AAsBP,OAAO,MAAM;EAAEL,SAAF;EAAaE,SAAb;EAAwBC;AAAxB,IAA8CN,SAAS,CAACS,OAA9D,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIN,KAAD,IAAWA,KAAK,CAACO,IAAN,CAAWb,KAA1C,C,CAEP;AACA;;AACA,OAAO,MAAMc,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACR,iBAAiB,CAACO,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAeb,SAAS,CAACiB,OAAzB"},"metadata":{},"sourceType":"module"}