{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0,\n  status: \"idle\"\n};\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      stateuser = null;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = userSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`\n\nexport const selectCount = state => state.user.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","status","userSlice","name","user","reducers","login","state","action","payload","logout","stateuser","increment","decrement","incrementByAmount","actions","selectCount","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"sources":["/Users/simon/Desktop/netflix-clone/src/features/userSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: 0,\n  status: \"idle\",\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      stateuser = null;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`\nexport const selectCount = (state) => state.user.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,MAAM,EAAE;AAFW,CAArB;AAKA,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EACnCK,IAAI,EAAE,MAD6B;EAEnCJ,YAAY,EAAE;IACZK,IAAI,EAAE;EADM,CAFqB;EAKnCC,QAAQ,EAAE;IACRC,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACxBD,KAAK,CAACH,IAAN,GAAaI,MAAM,CAACC,OAApB;IACD,CAHO;IAIRC,MAAM,EAAGH,KAAD,IAAW;MACjBI,SAAS,GAAG,IAAZ;IACD;EANO;AALyB,CAAD,CAA7B;AAeP,OAAO,MAAM;EAAEC,SAAF;EAAaC,SAAb;EAAwBC;AAAxB,IAA8CZ,SAAS,CAACa,OAA9D,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIT,KAAD,IAAWA,KAAK,CAACH,IAAN,CAAWJ,KAA1C,C,CAEP;AACA;;AACA,OAAO,MAAMiB,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACL,iBAAiB,CAACI,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAehB,SAAS,CAACoB,OAAzB"},"metadata":{},"sourceType":"module"}